// <auto-generated />
using System;
using AquaAlertApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AquaAlertApi.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250726123503_InitialBaseline")]
    partial class InitialBaseline
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AquaAlertApi.Data.Tank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("CapacityLiters")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("capacity_liters");

                    b.Property<decimal>("HeightCm")
                        .HasPrecision(6, 2)
                        .HasColumnType("numeric(6,2)")
                        .HasColumnName("height_cm");

                    b.Property<string>("Location")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("location");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("tanks_pkey");

                    b.ToTable("tanks", (string)null);
                });

            modelBuilder.Entity("AquaAlertApi.Data.WaterLevelLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("BatteryVoltage")
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric(5,2)")
                        .HasColumnName("battery_voltage");

                    b.Property<DateTime>("LoggedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("logged_at")
                        .HasDefaultValueSql("now()");

                    b.Property<decimal?>("PercentageFull")
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric(5,2)")
                        .HasColumnName("percentage_full");

                    b.Property<string>("SensorStatus")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("sensor_status")
                        .HasDefaultValueSql("'OK'::character varying");

                    b.Property<int>("TankId")
                        .HasColumnType("integer")
                        .HasColumnName("tank_id");

                    b.Property<decimal?>("TemperatureC")
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric(5,2)")
                        .HasColumnName("temperature_c");

                    b.Property<decimal>("WaterLevelCm")
                        .HasPrecision(6, 2)
                        .HasColumnType("numeric(6,2)")
                        .HasColumnName("water_level_cm");

                    b.Property<decimal?>("WaterVolumeLiters")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("water_volume_liters");

                    b.HasKey("Id")
                        .HasName("water_level_logs_pkey");

                    b.HasIndex("TankId");

                    b.ToTable("water_level_logs", (string)null);
                });

            modelBuilder.Entity("AquaAlertApi.Data.WaterLevelLog", b =>
                {
                    b.HasOne("AquaAlertApi.Data.Tank", "Tank")
                        .WithMany("WaterLevelLogs")
                        .HasForeignKey("TankId")
                        .IsRequired()
                        .HasConstraintName("fk_tank");

                    b.Navigation("Tank");
                });

            modelBuilder.Entity("AquaAlertApi.Data.Tank", b =>
                {
                    b.Navigation("WaterLevelLogs");
                });
#pragma warning restore 612, 618
        }
    }
}
